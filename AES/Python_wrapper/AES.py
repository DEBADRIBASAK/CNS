# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_AES')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_AES')
    _AES = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AES', [dirname(__file__)])
        except ImportError:
            import _AES
            return _AES
        try:
            _mod = imp.load_module('_AES', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _AES = swig_import_helper()
    del swig_import_helper
else:
    import _AES
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class AES(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AES, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AES, name)
    __repr__ = _swig_repr

    def __init__(self, key, block_size=16, no_of_rounds=10):
        this = _AES.new_AES(key, block_size, no_of_rounds)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def substitute_bits(self, c1, inv=False):
        return _AES.AES_substitute_bits(self, c1, inv)

    def sub_bit(self, block, inv=False):
        return _AES.AES_sub_bit(self, block, inv)

    def shift_n_row(self, arr, n, k, left=True):
        return _AES.AES_shift_n_row(self, arr, n, k, left)

    def shift_rows(self, block, left=True):
        return _AES.AES_shift_rows(self, block, left)

    def mix_col(self, block, enc=True):
        return _AES.AES_mix_col(self, block, enc)

    def add_round_key(self, round_no, block):
        return _AES.AES_add_round_key(self, round_no, block)

    def test(self):
        return _AES.AES_test(self)

    def schedule_key(self):
        return _AES.AES_schedule_key(self)

    def _print(self, round_no, block):
        return _AES.AES__print(self, round_no, block)

    def encrypt(self, plain_text):
        return _AES.AES_encrypt(self, plain_text)

    def decrypt(self, plain_text):
        return _AES.AES_decrypt(self, plain_text)
    __swig_destroy__ = _AES.delete_AES
    __del__ = lambda self: None
AES_swigregister = _AES.AES_swigregister
AES_swigregister(AES)

class GF_2n(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GF_2n, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GF_2n, name)
    __repr__ = _swig_repr

    def __init__(self, poly):
        this = _AES.new_GF_2n(poly)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def poly_to_bin(self, poly, degree):
        return _AES.GF_2n_poly_to_bin(self, poly, degree)

    def generate(self):
        return _AES.GF_2n_generate(self)

    def add(self, a, b):
        return _AES.GF_2n_add(self, a, b)

    def add_num(self, k1, k2):
        return _AES.GF_2n_add_num(self, k1, k2)

    def multiply_num(self, k1, k2):
        return _AES.GF_2n_multiply_num(self, k1, k2)

    def print_table(self):
        return _AES.GF_2n_print_table(self)

    def get_degree(self, k):
        return _AES.GF_2n_get_degree(self, k)

    def get_value(self, d):
        return _AES.GF_2n_get_value(self, d)

    def find_degree(self, a):
        return _AES.GF_2n_find_degree(self, a)

    def div(self, a, degA, b, degB, r):
        return _AES.GF_2n_div(self, a, degA, b, degB, r)

    def mul_inv(self, a):
        return _AES.GF_2n_mul_inv(self, a)
    __swig_destroy__ = _AES.delete_GF_2n
    __del__ = lambda self: None
GF_2n_swigregister = _AES.GF_2n_swigregister
GF_2n_swigregister(GF_2n)

# This file is compatible with both classic and new-style classes.


